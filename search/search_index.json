{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What is Safely Report?","text":"<p>Survey participants often feel reluctant to share their true experience because they are worried about potential retaliation in case their responses are identified (e.g., data leakage). This is especially the case for sensitive survey questions such as those asking about sexual harassment in the workplace. As a result, survey administrators (e.g., company management, researchers) often get inaccurate representation of the reality, which makes it hard to devise an appropriate course of action.</p> <p>Safely Report is a survey web application that can provide plausible deniability to survey respondents by recording survey responses with noise. For instance, when asking a worker whether they have been harassed by a manager, the application can be set up to record the answer \"yes\" with a probability of 30% even if the worker responds \"no\". This makes it nearly impossible to correctly identify which responses (of all those recorded \"yes\") are truthful reports \u2014 even if the survey results are leaked. Yet, the survey designer can still well estimate the proportion and other statistics of truthful reports because they know the rate of noise injection. Consequently, survey participants feel more safe and become more willing to share their true experience, which has been confirmed by a relevant study.</p> <p>Sounds interesting?</p> <p>Read about concepts behind Safely Report. Or, check out the quickstart guide to try out the application.</p>"},{"location":"quickstart/","title":"Getting Started","text":"<p>The easiest way to test out <code>safely-report</code> is through running a Docker container with sample data.</p> <p>Info</p> <p>If you do not have Docker installed, please follow instructions here to set it up.</p> <p>Once Docker is available, run:</p> <pre><code>docker run -p 80:80 princetonddss/safely-report:demo sh -c \"cp .env.dev .env &amp;&amp; sh docker-entrypoint.sh\"\n</code></pre> <p>Then, visit <code>http://0.0.0.0:80</code> to access the application (use <code>devpassword</code> to sign in as admin).</p> <p>Note</p> <p>This demo application uses a local SQLite database, so data will be cleared if the container shuts down. Persistent data storage requires a separate, dedicated relational database. Please refer to the deployment guide for more information.</p> <p>Take a look at the demo below to see the main features in action.</p>"},{"location":"concepts/garbling/","title":"Garbling","text":"<p>Safely Report preserves privacy of survey respondents by recording their responses to sensitive questions with random noise \u2014 a process known as \"garbling\".</p> <p>Note</p> <p>Garbling works for binary questions only. For instance, the question may ask if the respondent experienced any sexual harassment at work, where the possible response is either \"Yes\" or \"No\".</p> <p>Specifically, random noise is injected such that</p> <ol> <li>Sensitive response (e.g., \"Yes\" to \"Ever harassed sexually?\") is always recorded as is</li> <li>The opposite response (e.g., \"No\" to \"Ever harassed sexually?\") is reversed with the    pre-specified garbling probability (e.g., 30%)</li> </ol> <p>Mathematically, this can be formulated as follows:</p> \\[ \\tilde{r} = r + (1 - r) \\cdot \\eta \\] <p>where:</p> <ul> <li>\\(r\\) is the original binary response between 0 and 1</li> <li>\\(\\eta\\) is a garbling \"shock\" that takes the value of either 1 or 0 with the given garbling probability</li> <li>\\(\\tilde{r}\\) is the garbled response value</li> </ul> <p>The current application supports two types of garbling schemes, which are explained below.</p>"},{"location":"concepts/garbling/#iid-garbling","title":"IID Garbling","text":"<p>Under independent and identically distributed (IID) garbling, whether the given response will be garbled or not is randomized at the individual level. That is, the value of the garbling shock (i.e., \\(\\eta \\in \\{0, 1\\}\\)) is randomly generated for each given response.</p>"},{"location":"concepts/garbling/#block-garbling","title":"Block Garbling","text":"<p>In contrast, block garbling randomizes garbling shocks at the block/group level. For instance, with the garbling probability of 40%, block garbling randomly selects and garbles 2 out of every 5 responses, which works because \\(2 / 5 = 0.4\\).</p> <p>Note that a \"block\" can be any group of survey respondents. For instance, it can be the entire survey population, in which case the randomization is done at the population level (termed as \"population-blocked garbling\"). More interestingly, it can be a subgroup of survey respondents sharing a common attribute such as specific team membership, in which case the randomization is done at the subgroup level (termed as \"covariate-blocked garbling\").</p> <p>Block garbling offers several advantages over IID garbling. First, it enhances privacy assurance as it ensures that a predetermined proportion (e.g., 40%) of the survey responses are actually garbled, which in turn guarantees that at least that much proportion has been recorded as sensitive response (e.g., \"Yes\" to \"Ever harassed sexually?\"). This guarantee is especially important if the number of survey responses is small, in which case IID garbling may fail to garble any response at all.</p> <p>Another advantage of block garbling is that it improves precision of statistical inference, especially when underlying reporting rates are low as is often the case for sensitive questions. Specifically, block garbling reduces variance of an estimate (e.g., mean reporting rates) because its block-based randomization scheme produces covariance among garbling shocks. For more technical details, please consult page 17 of this paper.</p> <p>Info</p> <p>To learn about how to analyze garbling results, check the relevant guide.</p>"},{"location":"contributing/process/","title":"Contribution Process","text":"<p>First of all, thank you for your interest in contributing to Safely Report! We believe that it is the community that makes an open source project truly great and successful, so we welcome contribution from any new members.</p> <p>To contribute to Safely Report, you can take steps below.</p>"},{"location":"contributing/process/#1-open-an-issue","title":"1. Open an Issue","text":"<p>First, check existing issues here to see if any of them already addresses your concern. If none, open a new one with as much detail about your issue as possible.</p>"},{"location":"contributing/process/#2-triage-the-issue","title":"2. Triage the Issue","text":"<p>Once a new issue is opened, Safely Report's core development team will be in touch through replies in the issue ticket. The main purpose of this interaction is to clarify and flesh out any missing details about the issue so that the ticket can be turned into a concrete action plan with clearer scope and priority. You will also collaborate with the core development team to decide stakeholders for the issue resolution, such as implementation owner and reviewers/approvers.</p>"},{"location":"contributing/process/#3-implement-the-solution","title":"3. Implement the Solution","text":"<p>Unless the issue resolution requires deeper expertise or larger scope (e.g., architectural change), you will be highly encouraged to be the implementation owner. If so, you can follow instructions here to start your development.</p>"},{"location":"contributing/setup/","title":"Setup and Basics","text":""},{"location":"contributing/setup/#installation","title":"Installation","text":""},{"location":"contributing/setup/#cloning-repo","title":"Cloning Repo","text":"<p>First, fork the <code>safely-report</code> repo. Then, clone the forked repo to your development environment:</p> <pre><code>cd &lt;PATH-TO-DESIRED-LOCATION&gt;\ngit clone &lt;URL-TO-FORKED-REPO&gt;\n</code></pre> <p>To keep the forked repo in sync with the original one, set an \"upstream\":</p> <pre><code>git remote add upstream https://github.com/princeton-ddss/safely-report.git\n</code></pre>"},{"location":"contributing/setup/#setting-up-virtual-environment","title":"Setting up Virtual Environment","text":"<p>First, install Poetry following instructions here. Then, at your forked repo's root level, run the following to install dependencies:</p> <pre><code>poetry install --with dev\n</code></pre> <p>To activate the virtual environment, run:</p> <pre><code>poetry shell\n</code></pre> <p>You can deactivate the virtual environment by running:</p> <pre><code>deactivate\n</code></pre>"},{"location":"contributing/setup/#installing-pre-commit-hooks","title":"Installing Pre-Commit Hooks","text":"<p>Safely Report uses several pre-commit hooks to automatically standardize styles and formats across its codebase. To use these hooks, run:</p> <pre><code>pre-commit install\n</code></pre>"},{"location":"contributing/setup/#running-development-server","title":"Running Development Server","text":"<p>During development, you may want to check how your changes affect the behavior of the application. To this aim, you can start a local development server as follows:</p> <pre><code># Reset application states\nrm -rf .flask_sessions\nrm -rf instance\n\n# Set up dev environment (including admin password)\ncp .env.dev .env\n\n# Create DB\nflask db migrate -m \"Sync\"\nflask db upgrade\n\n# Run application (in debug mode)\nflask --app app run --debug\n</code></pre> <p>Then, visit <code>http://127.0.0.1:5000</code> to access the application.</p> <p>Note</p> <p>Make sure that the virtual environment has been activated.</p>"},{"location":"contributing/setup/#development","title":"Development","text":""},{"location":"contributing/setup/#making-changes","title":"Making Changes","text":"<p>With development dependencies installed, you are now ready to contribute to the source code! First, make a separate branch for your development work. Please use an informative name so that others can get good sense of what your changes are about.</p> <pre><code>git checkout -b &lt;NEW-BRANCH-NAME&gt;\n</code></pre> <p>After making changes you desire, save them to your development branch:</p> <pre><code>git add &lt;PATH-TO-CHANGED-FILE&gt;\ngit commit -m \"&lt;COMMIT-MESSAGE&gt;\"\n</code></pre> <p>Info</p> <p>To learn more about saving changes in Git, check this tutorial.</p> <p>Note that these changes have been saved only locally at this point, and you need to \"push\" them to your forked repo on GitHub:</p> <pre><code>git push\n</code></pre> <p>If the new (development) branch has not been pushed before, you will need to create its counterpart on GitHub with:</p> <pre><code>git push --set-upstream origin &lt;NEW-BRANCH-NAME&gt;\n</code></pre>"},{"location":"contributing/setup/#documenting-changes","title":"Documenting Changes","text":"<p>Good code documentation is essential to effective collaboration among different developers. As such, we ask contributors to add proper NumPy-styled docstrings for new functionalities that they add.</p>"},{"location":"contributing/setup/#testing-changes","title":"Testing Changes","text":"<p>Testing is an important part of <code>safely-report</code>'s development as it ensures that all features stay functional after changes. Hence, we strongly recommend you add tests for changes you introduce.</p> <p>To run all tests:</p> <pre><code>pytest tests\n</code></pre> <p>Or, to run select tests (e.g., those that you added/modified):</p> <pre><code># Example: Run all tests in a folder\npytest tests/unit/garbler\n\n# Example: Run all tests in a file\npytest tests/unit/garbler/test_garbling_params.py\n\n# Example: Run a particular test\npytest tests/unit/garbler/test_garbling_params.py::test_extract_garbling_params_with_missing_fields\n</code></pre>"},{"location":"contributing/setup/#integrating-changes","title":"Integrating Changes","text":"<p>As you make your changes in your development branch, it is possible that the original <code>safely-report</code> repo has been updated by other developers. To ensure that your changes are compatible with these updates by others, you will need to regularly \"sync\" your development branch with the original <code>safely-report</code> repo. You can do this by first syncing the <code>main</code> branch between your local (forked) repo and the original <code>safely-report</code> repo:</p> <pre><code>git fetch upstream\ngit checkout main\ngit merge upstream/main\n</code></pre> <p>Then, sync your development branch with the updated <code>main</code> branch:</p> <pre><code>git checkout &lt;DEV-BRANCH-NAME&gt;\ngit rebase main\n</code></pre> <p>Note</p> <p>If updates in the original <code>safely-report</code> repo are not compatible with changes in your development branch, you will need to resolve merge conflict(s). Check this tutorial to learn how.</p> <p>Once you are content with your changes and ready to integrate them into the original <code>safely-report</code> project, you can open a pull request following instructions here. Make sure that <code>base repository</code> is set to <code>princeton-ddss/safely-report</code> and <code>base</code> to <code>main</code>. To facilitate the review, please provide as much detail as possible about your changes in the pull request.</p>"},{"location":"contributing/tips/","title":"Recommended Practices","text":""},{"location":"contributing/tips/#organize-each-pr-with-relevant-changes","title":"Organize each PR with relevant changes","text":"<p>To maintain a linear/cleaner project history, the project was set up to apply \u201csquashing\u201d when merging a PR. That is, if a PR contains more than one commit, GitHub will combine them into a single commit where the summary equals the PR title (followed by the PR number) and the description consists of commit messages for all squashed commits (in date order). Hence, we ask you to organize each PR with related changes only so that it can represent a single unit of meaningful change.</p>"},{"location":"guides/analyze-results/","title":"Analyzing Garbling Results","text":"<p>Coming Soon</p>"},{"location":"guides/create-survey/","title":"Creating Survey Files","text":"<p>Three files are required to run Safely Report:</p> File Description XLSForm An Excel file specifying survey questions and other metadata Respondent Roster A CSV file listing respondents and their attributes (e.g., name) Enumerator Roster A CSV file listing enumerators and their attributes (e.g., name)"},{"location":"guides/create-survey/#xlsform","title":"XLSForm","text":""},{"location":"guides/create-survey/#xlsform-basics","title":"XLSForm Basics","text":"<p>If you are not familiar with XLSForm, please check out the following video tutorials:<sup>1</sup></p> <ol> <li>Form Structure</li> <li>Question Types</li> <li>Question Types: Examples</li> <li>Form Logic</li> <li>Form Logic: Examples</li> </ol> <p>To learn more about XLSForm, please check out this reference by ODK.</p>"},{"location":"guides/create-survey/#validating-xlsform","title":"Validating XLSForm","text":"<p>You can use this tool to validate and preview your XLSForm.</p> <p>Please note that Safely Report validates XLSForm for additional requirements including:</p> <ul> <li> <p>No infinite repeats (1)</p> <ol> <li>Instead, the survey can be designed to have the respondent dynamically set and change     the number of repeats. For instance, if the survey has a repeat section asking details     of family members (e.g., name, age), it can first ask how many family members     the respondent has and then, based on this response, perform repeats.</li> </ol> </li> <li> <p>No nested repeats (1)</p> <ol> <li>Nested repeats introduce unnecessary complication to administration of the survey itself.</li> </ol> </li> </ul> <p>Note</p> <p>Safely Report may not support all XLSForm functions and question types. If you need to use a specific function or question type that is currently unavailable, please submit a request following the process here.</p>"},{"location":"guides/create-survey/#specifying-garbling","title":"Specifying Garbling","text":"<p>Info</p> <p>If you are not familiar with garbling, please review relevant concepts here.</p> <p>Garbling parameters can be specified in the <code>survey</code> sheet of XLSForm, specifically in the following columns:</p> <ul> <li> <p><code>garbling::answer</code></p> <ul> <li>Name (not label) of the choice option to be garbled into.</li> <li>Most of the time, it is the name of the \"yes\" choice option.</li> </ul> </li> <li> <p><code>garbling::rate</code></p> <ul> <li>Rate at which garbling will be applied.</li> <li> <p>For block garbling, supported rates are limited to the following values:</p> Rate Description <code>0.20</code> For every 5 responses, garble 1 of them <code>0.25</code> For every 4 responses, garble 1 of them <code>0.40</code> For every 5 responses, garble 2 of them <code>0.50</code> For every 2 responses, garble 1 of them <code>0.60</code> For every 5 responses, garble 3 of them <code>0.75</code> For every 4 responses, garble 3 of them <code>0.80</code> For every 5 responses, garble 4 of them </li> </ul> </li> <li> <p><code>garbling::covariate</code></p> <ul> <li>Name of a covariate to use for covariate-blocked garbling.</li> <li>If asterisk (<code>*</code>), it performs population-blocked garbling.</li> <li>If unspecified, it performs IID garbling.</li> </ul> </li> </ul> <p>Please note that garbling cannot be applied inside a repeat section because this makes it impossible to control the number of garbling performed under block garbling.</p> <p>For a working example/reference, you can check this file.</p>"},{"location":"guides/create-survey/#rosters","title":"Rosters","text":"<p>Rosters should be provided as CSV files that can contain any columns and data.</p> <p>Note that the respondent roster should include all covariates to be used for block garbling. That is, covariate values for block garbling cannot be gathered from the survey; they need to exist in the roster.</p> <p>Warning</p> <p><code>id</code> is a reserved name for system-generated IDs, so an error will be raised if a roster contains a column by this name.</p> <ol> <li> <p>Produced by Statistics for Sustainable Development (Stats4SD) \u21a9</p> </li> </ol>"},{"location":"guides/deploy-app/","title":"Deploying Safely Report","text":"<p>Note</p> <p>Please consult technical staff in your organization if you are not familiar with deployment technologies (e.g., Docker).</p> <p>The deployment method can vary based on available resources and personal preferences, making it impractical to address every detail. Hence, this guide focuses on one approach utilizing Docker, which should serve as a reference for alternative methods.</p>"},{"location":"guides/deploy-app/#1-prepare-survey-files-to-use","title":"1. Prepare survey files to use","text":"<p>First, make sure you have the following files required for a survey:</p> <ul> <li>XLSForm file</li> <li>Respondent roster file</li> <li>Enumerator roster file</li> </ul> <p>Info</p> <p>If you are not familiar with these files, please review the guide on survey creation.</p> <p>Then, place these files in a designated location on the host machine (e.g., <code>/survey/files/</code>), which will later be mounted to the Docker container.</p>"},{"location":"guides/deploy-app/#2-define-environment-variables","title":"2. Define environment variables","text":"<p>Create <code>.env</code> file defining the following environment variables:</p> Name Description <code>SAFELY_REPORT_SECRET_KEY</code> A key to be used for enhancing the security of the Flask application <code>SAFELY_REPORT_ADMIN_PASSWORD</code> Password for the admin user <code>SAFELY_REPORT_DATABASE_URI</code> URI for connecting to a relational database <code>XLSFORM_PATH</code> Path to the XLSForm file specifying the survey <code>RESPONDENT_ROSTER_PATH</code> Path to the CSV file containing survey respondent roster <code>ENUMERATOR_ROSTER_PATH</code> Path to the CSV file containing survey enumerator roster <p>Note</p> <p><code>XLSFORM_PATH</code>, <code>RESPONDENT_ROSTER_PATH</code>, and <code>ENUMERATOR_ROSTER_PATH</code> should all refer to paths within the Docker container rather than paths in the host machine. For instance, if the XLSForm and roster files are mounted to the container's <code>/app/data/</code> folder, the path variables should all reference this location (e.g., <code>XLSFORM_PATH=/app/data/xlsform.xlsx</code>).</p>"},{"location":"guides/deploy-app/#3-start-a-docker-container","title":"3. Start a Docker container","text":"<p>Finally, start the Docker container by running:</p> <pre><code>docker run -d \\\n    -p [HOST-PORT]:80 \\\n    -v [PATH-TO-SURVEY-FILES]:/app/data \\\n    --env-file=[PATH-TO-ENV-FILE] \\\n    princetonddss/safely-report:demo\n</code></pre> <p>where</p> <ul> <li><code>[HOST-PORT]</code> refers to the port on the host machine to use for the container</li> <li><code>[PATH-TO-SURVEY-FILES]</code> refers to the folder on the host machine where XLSForm and roster files are stored</li> <li><code>[PATH-TO-ENV-FILE]</code> refers to the <code>.env</code> file's path on the host machine</li> </ul> <p>Note that the command above is provided as an example \u2014 please feel free to update it with any other options (e.g., restart policy).</p>"},{"location":"guides/get-help/","title":"Getting Help","text":"<p>If you encounter a problem or want to request a new feature, please open a discussion here.</p> <p>Note</p> <p>Please check if someone already opened a relevant discussion before creating a new one.</p>"}]}